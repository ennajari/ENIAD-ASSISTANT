#!/usr/bin/env python3
"""
Test d'int√©gration compl√®te - ElevenLabs TTS dans l'interface ENIAD
"""
import os
import json

def test_components_integration():
    """Tester l'int√©gration des composants"""
    print("üß© TEST INT√âGRATION COMPOSANTS")
    print("=" * 35)
    
    components_to_check = [
        ("TTSButton.jsx", "Composant bouton TTS am√©lior√©"),
        ("TTSFloatingPanel.jsx", "Panneau flottant TTS"),
        ("useTTSState.js", "Hook de gestion d'√©tat TTS"),
        ("speechService.js", "Service TTS avec ElevenLabs"),
        ("MessageBubble.jsx", "Int√©gration dans les messages"),
        ("App.jsx", "Int√©gration principale"),
        ("ChatContent.jsx", "Passage des props TTS")
    ]
    
    results = {}
    
    for filename, description in components_to_check:
        file_path = f"chatbot-ui/chatbot-academique/src/components/{filename}" if filename.endswith('.jsx') else \
                   f"chatbot-ui/chatbot-academique/src/hooks/{filename}" if filename.startswith('use') else \
                   f"chatbot-ui/chatbot-academique/src/services/{filename}" if filename.endswith('.js') else \
                   f"chatbot-ui/chatbot-academique/src/{filename}"
        
        if os.path.exists(file_path):
            print(f"‚úÖ {description}")
            results[filename] = True
        else:
            print(f"‚ùå {description} - Fichier manquant")
            results[filename] = False
    
    return results

def test_elevenlabs_configuration():
    """Tester la configuration ElevenLabs"""
    print(f"\nüéôÔ∏è TEST CONFIGURATION ELEVENLABS")
    print("=" * 40)
    
    speech_service_path = "chatbot-ui/chatbot-academique/src/services/speechService.js"
    
    if not os.path.exists(speech_service_path):
        print("‚ùå speechService.js introuvable")
        return False
    
    with open(speech_service_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    checks = [
        ("Cl√© API ElevenLabs", "sk_d8fc9625fbfd20f51143215781f41238b0f80986af1648ef" in content),
        ("Voice ID configur√©", "JBFqnCBsd6RMkjVDRZzb" in content),
        ("Mod√®le multilingue", "eleven_multilingual_v2" in content),
        ("D√©tection de langue", "detectLanguage" in content),
        ("M√©thode ElevenLabs", "elevenLabsTTS" in content),
        ("Callbacks d'√©tat", "onStateChange" in content)
    ]
    
    passed = 0
    for check_name, condition in checks:
        if condition:
            print(f"‚úÖ {check_name}")
            passed += 1
        else:
            print(f"‚ùå {check_name}")
    
    print(f"\nüìä Configuration: {passed}/{len(checks)}")
    return passed == len(checks)

def test_interface_integration():
    """Tester l'int√©gration dans l'interface"""
    print(f"\nüñ•Ô∏è TEST INT√âGRATION INTERFACE")
    print("=" * 35)
    
    app_path = "chatbot-ui/chatbot-academique/src/App.jsx"
    
    if not os.path.exists(app_path):
        print("‚ùå App.jsx introuvable")
        return False
    
    with open(app_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    checks = [
        ("Import useTTSState", "useTTSState" in content),
        ("Import TTSFloatingPanel", "TTSFloatingPanel" in content),
        ("Hook TTS initialis√©", "ttsState = useTTSState" in content),
        ("Fonction speakText", "speakText" in content),
        ("Props TTS pass√©es", "ttsState.isSpeaking" in content),
        ("Panneau flottant rendu", "<TTSFloatingPanel" in content)
    ]
    
    passed = 0
    for check_name, condition in checks:
        if condition:
            print(f"‚úÖ {check_name}")
            passed += 1
        else:
            print(f"‚ùå {check_name}")
    
    print(f"\nüìä Interface: {passed}/{len(checks)}")
    return passed == len(checks)

def test_message_bubble_integration():
    """Tester l'int√©gration dans MessageBubble"""
    print(f"\nüí¨ TEST INT√âGRATION MESSAGE BUBBLE")
    print("=" * 40)
    
    bubble_path = "chatbot-ui/chatbot-academique/src/components/MessageBubble.jsx"
    
    if not os.path.exists(bubble_path):
        print("‚ùå MessageBubble.jsx introuvable")
        return False
    
    with open(bubble_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    checks = [
        ("Import TTSButton", "TTSButton" in content),
        ("Prop isLoading", "isLoading" in content),
        ("TTSButton utilis√©", "<TTSButton" in content),
        ("Props correctes", "variant=\"premium\"" in content),
        ("Support multilingue", "language={currentLanguage}" in content)
    ]
    
    passed = 0
    for check_name, condition in checks:
        if condition:
            print(f"‚úÖ {check_name}")
            passed += 1
        else:
            print(f"‚ùå {check_name}")
    
    print(f"\nüìä MessageBubble: {passed}/{len(checks)}")
    return passed == len(checks)

def test_demo_files():
    """Tester les fichiers de d√©monstration"""
    print(f"\nüé≠ TEST FICHIERS D√âMONSTRATION")
    print("=" * 35)
    
    demo_files = [
        ("demo_elevenlabs_tts.html", "D√©monstration ElevenLabs"),
        ("test_elevenlabs_integration.html", "Test d'int√©gration interface"),
        ("ELEVENLABS_MIGRATION_REPORT.md", "Rapport de migration")
    ]
    
    passed = 0
    for filename, description in demo_files:
        if os.path.exists(filename):
            print(f"‚úÖ {description}")
            passed += 1
        else:
            print(f"‚ùå {description} - Fichier manquant")
    
    print(f"\nüìä D√©monstrations: {passed}/{len(demo_files)}")
    return passed == len(demo_files)

def test_package_json():
    """Tester la configuration package.json"""
    print(f"\nüì¶ TEST CONFIGURATION PACKAGE")
    print("=" * 35)
    
    package_path = "chatbot-ui/chatbot-academique/package.json"
    
    if not os.path.exists(package_path):
        print("‚ùå package.json introuvable")
        return False
    
    try:
        with open(package_path, 'r', encoding='utf-8') as f:
            package_data = json.load(f)
        
        # V√©rifier les d√©pendances n√©cessaires
        dependencies = package_data.get('dependencies', {})
        
        required_deps = [
            '@mui/material',
            '@mui/icons-material',
            'react',
            'axios'
        ]
        
        missing_deps = []
        for dep in required_deps:
            if dep in dependencies:
                print(f"‚úÖ {dep}: {dependencies[dep]}")
            else:
                print(f"‚ùå {dep}: Manquant")
                missing_deps.append(dep)
        
        return len(missing_deps) == 0
        
    except Exception as e:
        print(f"‚ùå Erreur lecture package.json: {e}")
        return False

def generate_integration_report():
    """G√©n√©rer un rapport d'int√©gration"""
    print(f"\nüìã G√âN√âRATION RAPPORT INT√âGRATION")
    print("=" * 45)
    
    report = {
        "integration_date": "2024-12-19",
        "elevenlabs_version": "API v1",
        "components": {
            "TTSButton": "‚úÖ Composant bouton TTS premium avec √©tats visuels",
            "TTSFloatingPanel": "‚úÖ Panneau de contr√¥le flottant avec progression",
            "useTTSState": "‚úÖ Hook de gestion d'√©tat TTS avanc√©",
            "speechService": "‚úÖ Service ElevenLabs int√©gr√© avec d√©tection auto",
            "MessageBubble": "‚úÖ Int√©gration dans les messages de chat",
            "App": "‚úÖ Int√©gration principale avec panneau flottant"
        },
        "features": {
            "auto_language_detection": "‚úÖ D√©tection automatique FR/AR",
            "premium_quality": "‚úÖ Qualit√© audio ElevenLabs premium",
            "visual_feedback": "‚úÖ √âtats visuels (loading/speaking/idle)",
            "floating_controls": "‚úÖ Panneau de contr√¥le flottant",
            "progress_tracking": "‚úÖ Suivi de progression audio",
            "multilingual_support": "‚úÖ Support fran√ßais et arabe",
            "zero_configuration": "‚úÖ Configuration automatique"
        },
        "api_configuration": {
            "service": "ElevenLabs",
            "api_key": "Int√©gr√©e dans le code",
            "voice_id": "JBFqnCBsd6RMkjVDRZzb",
            "model": "eleven_multilingual_v2",
            "languages": ["fr", "ar", "en"]
        }
    }
    
    try:
        with open("integration_report.json", "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        print("‚úÖ Rapport sauvegard√©: integration_report.json")
        return True
    except Exception as e:
        print(f"‚ùå Erreur sauvegarde rapport: {e}")
        return False

def main():
    """Test principal d'int√©gration compl√®te"""
    print("üéôÔ∏è TEST INT√âGRATION COMPL√àTE ELEVENLABS TTS")
    print("=" * 50)
    print("üéØ Validation de l'int√©gration ElevenLabs dans l'interface ENIAD")
    
    # Tests d'int√©gration
    tests = [
        ("Composants", test_components_integration),
        ("Configuration ElevenLabs", test_elevenlabs_configuration),
        ("Interface principale", test_interface_integration),
        ("MessageBubble", test_message_bubble_integration),
        ("D√©monstrations", test_demo_files),
        ("Package.json", test_package_json)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\nüîÑ {test_name}")
        try:
            result = test_func()
            results[test_name] = result
        except Exception as e:
            print(f"‚ùå Erreur dans {test_name}: {str(e)}")
            results[test_name] = False
    
    # R√©sum√© final
    print(f"\nüìä R√âSUM√â INT√âGRATION ELEVENLABS")
    print("=" * 40)
    
    success_count = 0
    for test_name, result in results.items():
        status = "‚úÖ OK" if result else "‚ùå √âCHEC"
        print(f"   {status} {test_name}")
        if result:
            success_count += 1
    
    total_tests = len(results)
    print(f"\nüéØ SCORE FINAL: {success_count}/{total_tests}")
    
    if success_count == total_tests:
        print(f"\nüéâ INT√âGRATION ELEVENLABS PARFAITE!")
        print("‚úÖ Tous les composants sont int√©gr√©s")
        print("‚úÖ Configuration ElevenLabs op√©rationnelle")
        print("‚úÖ Interface utilisateur compl√®te")
        print("‚úÖ Support multilingue fonctionnel")
        print("‚úÖ D√©monstrations disponibles")
        
        print(f"\nüöÄ FONCTIONNALIT√âS DISPONIBLES:")
        print("   üéôÔ∏è TTS ElevenLabs premium (FR/AR)")
        print("   üéõÔ∏è Boutons TTS dynamiques avec √©tats")
        print("   üì± Panneau de contr√¥le flottant")
        print("   üéØ D√©tection automatique de langue")
        print("   ‚ö° Feedback visuel en temps r√©el")
        print("   üîß Configuration z√©ro")
        
        print(f"\nüìã UTILISATION:")
        print("   1. npm run dev (dans chatbot-academique)")
        print("   2. Cliquer sur ‚ñ∂Ô∏è dans les messages")
        print("   3. Profiter de la qualit√© ElevenLabs!")
        
        # G√©n√©rer le rapport
        generate_integration_report()
        
    elif success_count >= 4:
        print(f"\n‚ö†Ô∏è INT√âGRATION PARTIELLEMENT R√âUSSIE")
        print("üîß La plupart des fonctionnalit√©s sont op√©rationnelles")
        print("üí° V√©rifiez les tests √©chou√©s pour finaliser")
        
    else:
        print(f"\n‚ùå PROBL√àMES D'INT√âGRATION")
        print("üîß Int√©gration incompl√®te")
        print("üí° V√©rifiez les composants et configurations")

if __name__ == "__main__":
    main()
