{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Abdel/Desktop/ENIAD-ASSISTANT/config/db.js"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI;\n\nif (!MONGODB_URI) {\n  throw new Error('Please define the MONGODB_URI environment variable');\n}\n\nlet cached = global.mongoose;\n\nif (!cached) {\n  cached = global.mongoose = { conn: null, promise: null };\n}\n\nasync function connectDB() {\n  if (cached.conn) {\n    return cached.conn;\n  }\n\n  if (!cached.promise) {\n    const opts = {\n      bufferCommands: false,\n    };\n\n    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\n      return mongoose;\n    });\n  }\n\n  try {\n    cached.conn = await cached.promise;\n  } catch (e) {\n    cached.promise = null;\n    throw e;\n  }\n\n  return cached.conn;\n}\n\nexport default connectDB;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAAM,IAAI,CAAC,CAAC;YACzD,OAAO;QACT;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,GAAG;QACV,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;uCAEe","debugId":null}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Abdel/Desktop/ENIAD-ASSISTANT/models/DocumentChunk.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst DocumentChunkSchema = new mongoose.Schema({\r\n  content: { type: String, required: true },\r\n  embedding: { type: [Number], required: true },\r\n  metadata: {\r\n    source: { type: String, required: true },\r\n    page: { type: Number },\r\n  },\r\n});\r\n\r\n// Création de l'index vectoriel\r\nDocumentChunkSchema.index({ embedding: \"cosmosSearch\" }, { cosmosSearchOptions: { kind: \"vector-ivf\", numLists: 1, similarity: \"COS\" } });\r\n\r\nexport default mongoose.models.DocumentChunk || mongoose.model(\"DocumentChunk\", DocumentChunkSchema);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,sBAAsB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IAC9C,SAAS;QAAE,MAAM;QAAQ,UAAU;IAAK;IACxC,WAAW;QAAE,MAAM;YAAC;SAAO;QAAE,UAAU;IAAK;IAC5C,UAAU;QACR,QAAQ;YAAE,MAAM;YAAQ,UAAU;QAAK;QACvC,MAAM;YAAE,MAAM;QAAO;IACvB;AACF;AAEA,gCAAgC;AAChC,oBAAoB,KAAK,CAAC;IAAE,WAAW;AAAe,GAAG;IAAE,qBAAqB;QAAE,MAAM;QAAc,UAAU;QAAG,YAAY;IAAM;AAAE;uCAExH,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,iBAAiB","debugId":null}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Abdel/Desktop/ENIAD-ASSISTANT/services/rag/vectorStore.js"],"sourcesContent":["import { connectDB } from \"@/config/db\";\r\nimport DocumentChunk from \"@/models/DocumentChunk\";\r\nimport { OpenAIEmbeddings } from \"@langchain/openai\";\r\n\r\n// Use OpenAI embeddings (requires OPENAI_API_KEY in .env)\r\nconst embeddings = new OpenAIEmbeddings({\r\n  modelName: \"text-embedding-3-small\", // Lightweight and cost-effective\r\n  openAIApiKey: process.env.OPENAI_API_KEY\r\n});\r\n\r\nexport class MongoVectorStore {\r\n  async similaritySearch(query, k = 4) {\r\n    await connectDB();\r\n    const queryEmbedding = await embeddings.embedQuery(query);\r\n    \r\n    // Recherche des chunks les plus similaires\r\n    const chunks = await DocumentChunk.aggregate([\r\n      {\r\n        $vectorSearch: {\r\n          queryVector: queryEmbedding,\r\n          path: \"embedding\",\r\n          numCandidates: 100,\r\n          limit: k,\r\n          index: \"vector_index\",\r\n        },\r\n      },\r\n      {\r\n        $project: {\r\n          content: 1,\r\n          metadata: 1,\r\n          score: { $meta: \"vectorSearchScore\" },\r\n        },\r\n      },\r\n    ]);\r\n\r\n    return chunks;\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAAA;;;;AAEA,0DAA0D;AAC1D,MAAM,aAAa,IAAI,6JAAA,CAAA,mBAAgB,CAAC;IACtC,WAAW;IACX,cAAc,QAAQ,GAAG,CAAC,cAAc;AAC1C;AAEO,MAAM;IACX,MAAM,iBAAiB,KAAK,EAAE,IAAI,CAAC,EAAE;QACnC,MAAM,CAAA,GAAA,8GAAA,CAAA,YAAS,AAAD;QACd,MAAM,iBAAiB,MAAM,WAAW,UAAU,CAAC;QAEnD,2CAA2C;QAC3C,MAAM,SAAS,MAAM,yHAAA,CAAA,UAAa,CAAC,SAAS,CAAC;YAC3C;gBACE,eAAe;oBACb,aAAa;oBACb,MAAM;oBACN,eAAe;oBACf,OAAO;oBACP,OAAO;gBACT;YACF;YACA;gBACE,UAAU;oBACR,SAAS;oBACT,UAAU;oBACV,OAAO;wBAAE,OAAO;oBAAoB;gBACtC;YACF;SACD;QAED,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 299, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Abdel/Desktop/ENIAD-ASSISTANT/app/api/chat/rag/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { MongoVectorStore } from \"@/services/rag/vectorStore\";\r\nimport { getAuth } from \"@clerk/nextjs/server\";\r\n\r\nexport const maxDuration = 600; // 10 minutes\r\n\r\nexport async function POST(req) {\r\n  try {\r\n    const { userId } = getAuth(req);\r\n    if (!userId) {\r\n      return NextResponse.json(\r\n        { success: false, message: \"Authentication required\" },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const { prompt } = await req.json();\r\n    if (!prompt) {\r\n      return NextResponse.json(\r\n        { success: false, message: \"Prompt is required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const vectorStore = new MongoVectorStore();\r\n    const relevantChunks = await vectorStore.similaritySearch(prompt);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        role: \"assistant\",\r\n        content: \"Contexte RAG récupéré avec succès\",\r\n        context: relevantChunks,\r\n        timestamp: Date.now(),\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"RAG Error:\", error);\r\n    return NextResponse.json(\r\n      { success: false, message: \"RAG processing failed\", error: error.message },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,MAAM,cAAc,KAAK,aAAa;AAEtC,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,6KAAA,CAAA,UAAO,AAAD,EAAE;QAC3B,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAA0B,GACrD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,IAAI;QACjC,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAqB,GAChD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,cAAc,IAAI,gIAAA,CAAA,mBAAgB;QACxC,MAAM,iBAAiB,MAAM,YAAY,gBAAgB,CAAC;QAE1D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;gBACJ,MAAM;gBACN,SAAS;gBACT,SAAS;gBACT,WAAW,KAAK,GAAG;YACrB;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,cAAc;QAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,SAAS;YAAyB,OAAO,MAAM,OAAO;QAAC,GACzE;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}